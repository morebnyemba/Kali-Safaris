# --- Mailu IMAP Fetcher Settings ---
# These are used by the fetch_mailu_attachments management command.
MAILU_IMAP_HOST=mail.kalaisafaris.com
MAILU_IMAP_USER=bookings@kalaisafaris.com
MAILU_IMAP_PASS='your_strong_mail_password_here'

# --- Google Gemini API Settings ---
GEMINI_API_KEY='your_real_gemini_api_key_here'
# Backend Environment Variables
# This file contains secrets and should NOT be committed to version control.
# It is loaded by settings.py and docker-compose.yml.

# --- Security Settings ---
# IMPORTANT: Generate a new, random secret key for production.
# You can use an online generator or Django's `get_random_secret_key()` utility.

DJANGO_SECRET_KEY='your_strong_and_unique_production_secret_key_here'
DJANGO_DEBUG=False # This MUST be False in production for security.

# --- Domain and Host Settings ---
# A comma-separated list of hosts your Django app will serve.
DJANGO_ALLOWED_HOSTS='backend.kalaisafaris.com,dashboard.kalaisafaris.com,testbackend.worldbet2.com,www.testbackend.worldbet2.com,72.60.91.41,127.0.0.1,localhost'

# A comma-separated list of trusted origins for CSRF protection (for POST, PUT, etc.).
# This MUST include your frontend domains with the correct scheme (http/https).
CSRF_TRUSTED_ORIGINS='https://dashboard.kalaisafaris.com,https://testbackend.worldbet2.com,https://www.testbackend.worldbet2.com,http://localhost:5173,http://127.0.0.1:5173'


# A comma-separated list of origins allowed to make cross-site API requests.
# This also MUST include your frontend domains.
CORS_ALLOWED_ORIGINS='https://dashboard.kalaisafaris.com,https://testbackend.worldbet2.com,https://www.testbackend.worldbet2.com,http://localhost:5173,http://127.0.0.1:5173'
CORS_ALLOW_CREDENTIALS=True

# --- Database Settings (for PostgreSQL running in Docker) ---
# These must match the environment variables in your docker-compose.yml for the 'db' service.
DB_ENGINE='django.db.backends.postgresql'
DB_NAME='whatsapp_crm_dev'
DB_USER='crm_user'
# IMPORTANT: Use a strong, randomly generated password for your production database.
DB_PASSWORD='kayden'
DB_PASSWORD='your_strong_database_password_here'
DB_HOST='db' # This is the service name of your PostgreSQL container in docker-compose.yml
DB_PORT='5432'

# --- Celery Settings ---
CELERY_BROKER_URL='redis://:kayden@redis:6379/0' # 'redis' is the service name in docker-compose.yml
CELERY_BROKER_URL='redis://:your_strong_redis_password_here@redis:6379/0' # 'redis' is the service name in docker-compose.yml

# --- Channels (WebSocket) Settings ---
REDIS_URL='redis://:kayden@redis:6379/1' # This URL is used by Django Channels to connect to Redis for real-time messaging.
REDIS_URL='redis://:your_strong_redis_password_here@redis:6379/1' # This URL is used by Django Channels to connect to Redis for real-time messaging.


# --- JWT (JSON Web Token) Settings ---
JWT_ACCESS_TOKEN_LIFETIME_MINUTES='60'
JWT_REFRESH_TOKEN_LIFETIME_DAYS='7'

# --- Application-Specific Settings ---
CONVERSATION_EXPIRY_DAYS='60'
WHATSAPP_APP_SECRET='c189bbdaac02442a28216debfed60a8b'

# --- Content Security Policy (CSP) Settings ---
BACKEND_DOMAIN_FOR_CSP='testbackend.worldbet2.com'
FRONTEND_DOMAIN_FOR_CSP='testbackend.worldbet2.com' # Assuming frontend is on the same test domain

# --- Logging Settings (Optional - defaults are in settings.py) ---
# DJANGO_LOG_LEVEL='INFO'
# CELERY_LOG_LEVEL='INFO'
